const { NODE_ENV = 'development', PORT = 5000 } = process.env;
const express = require('express');
const { generate: generateId } = require('shortid');
const helpers = require('./src/helpers');
const app = express();

if (NODE_ENV === 'development') app.use(require('morgan')('dev'));
app.use(require('body-parser').json());

const data = {
  fruits: [],
  vegetables: []
};

app.get('/vegetables', (req, res, next) => {
  const { vegetables } = data;
  const { name } = req.query;
  // Filter array for vegetable objects where vegetable name contains the value provided for  req.query.name
  // Question: What is the best way to handle case sensitivity and quotes in the query param? Regex?
  const filteredVeg = vegetables.filter(veg => veg.name.includes(name));
  if (!name) {
    // If no query parameter for name included in request, return vegetables array (all vegetables)
    res.status(200).json(vegetables);
  } else {
    // If query parameter for name included in request, 
    // return a list of all vegetables where the query is included somewhere in the name.
    // If there are no vegetables that match, just return an empty array.
    res.status(200).json(filteredVeg);
  }
});

app.get('/vegetables/:id', (req, res, next) => {
  const { vegetables } = data;
  const { id } = req.params;
   //find the first result in array where vegetable ID === req.params.id; there should only ever be one match since IDs are unique
  const vegetable = vegetables.find(veggie => veggie.id === id);
  // if a match is not found
  if (!vegetable) {
    // return a 404 status and error message of ID not found
    const message = `Could not find vegetable with ID of ${id}`;
    next({ status: 404, message });
  }
  // otherwise, as match is found
  // return status 200, vegetable detail in response json
  res.status(200).json(vegetable);
});

app.post('/vegetables', helpers.validate, (req, res, next) => {
  const { vegetables } = data;
  // create object vegetable with id, spread of body (name, price). id is generated by shortid
  const vegetable = { id: generateId(), ...req.body };
  // add vegetable object to vegetables array
  vegetables.push(vegetable);
  // return status 201, vegetable detail in response json
  res.status(201).json(vegetable);
});

app.delete('/vegetables/:id', (req, res, next) => {
  const { vegetables } = data;
  const { id } = req.params;
  //find the first result in array where vegetable ID === req.params.id; there should only ever be one match since IDs are unique
  const vegetable = vegetables.find(veg => veg.id === id);
  // if a match is not found
  if (!vegetable) {
    // return a 404 status and error message of ID not found
    const message = `Could not find vegetable with ID of ${id}`;
    next({status: 404, message});
  } else {
    // otherwise, as match is found
    // find the index of vegetable where id matches req.params.id (again, only one match) and splice this index from vegetables array.
    // then return updated array with 200 response code
    vegetables.splice(vegetables.findIndex(veg => veg.id === id),1);
    res.status(200).json(vegetable);
  }
});

app.put('/vegetables/:id', (req, res, next) => {
  const { vegetables } = data;
  const { id } = req.params;
  //find the first result in array where vegetable ID === req.params.id; there should only ever be one match since IDs are unique
  const vegetable = vegetables.find(veg => veg.id === id);
   // if a match is not found
   if (!vegetable) {
    // return a 404 status and error message of ID not found
    const message = `Could not find vegetable with ID of ${id}`;
    next({status: 404, message})
  } else {
    // otherwise, as match is found
    // find the index of vegetable where id matches req.params.id (again, only one match) and update name and price values using req.params.
    // then return updated vegetable with 201 response code
    let indexOfVeg = vegetables.findIndex(veg => veg.id === id);
    vegetables[indexOfVeg] = {id: id, ...req.body}
    res.status(201).json(vegetables[indexOfVeg]);
  }

});

app.get('/fruits', (req, res, next) => {
  const { fruits } = data;
  const { name } = req.query;
  // Filter array for fruit objects where fruit name contains the value provided for  req.query.name 
  // Question: What is the best way to handle case sensitivity and quotes in the query param? Regex?
  const filteredFruit = fruits.filter(fruit => fruit.name.includes(name));
  if (!name) {
    // If no query parameter for name included in request, return fruits array (all fruits)
    res.status(200).json(fruits);
  } else {
    // If query parameter for name included in request, 
    // return a list of all fruits where the query is included somewhere in the name.
    // If there are no fruits that match, just return an empty array.
    res.status(200).json(filteredFruit);
  }
});

app.get('/fruits/:id', (req, res, next) => {
  const { fruits } = data;
  const { id } = req.params;
  //find the first result in array where fruit ID === req.params.id; there should only ever be one match since IDs are unique
  const fruit = fruits.find(fruit => fruit.id === id);
  // if no match found
  if (!fruit) {
    // return a 404 status and error message of ID not found
    const message = `Could not find fruit with ID of ${id}`;
    next({ status: 404, message });
  }
  // otherwise, as match is found
  // return status 200, fruit detail in response json
  res.status(200).json(fruit);
});

app.post('/fruits', helpers.validate, (req, res, next) => {
  const { fruits } = data;
  // create object fruit with id, spread of body (name, price). id is generated by shortid
  const fruit = { id: generateId(), ...req.body };
  // add fruit object to fruits array 
  fruits.push(fruit);
  // return status 201, fruit detail in response json
  res.status(201).json(fruit);
});

app.delete('/fruits/:id', (req, res, next) => {
  const { fruits } = data;
  const { id } = req.params;
  //find the first result in array where vegetable ID === req.params.id; there should only ever be one match since IDs are unique
  const fruit = fruits.find(fruit => fruit.id === id);
  // if a match is not found
  if (!fruit) {
    // return a 404 status and error message of ID not found
    const message = `Could not find vegetable with ID of ${id}`;
    next({status: 404, message});
  } else {
    // otherwise, as match is found
    // find the index of vegetable where id matches req.params.id (again, only one match) and splice this index from vegetables array.
    // then return updated array with 200 response code
    fruits.splice(fruits.findIndex(fruit => fruit.id === id),1);
    res.status(200).json(fruit);
  }
});

app.put('/fruits/:id', (req, res, next) => {
  const { fruits } = data;
  const { id } = req.params;
  //find the first result in array where vegetable ID === req.params.id; there should only ever be one match since IDs are unique
  const fruit = fruits.find(fruit => fruit.id === id);
   // if a match is not found
   if (!fruit) {
    // return a 404 status and error message of ID not found
    const message = `Could not find fruit with ID of ${id}`;
    next({status: 404, message})
  } else {
    // otherwise, as match is found
    // find the index of vegetable where id matches req.params.id (again, only one match) and update name and price values using req.params.
    // then return updated fruit object with 201 response code
    let indexOfFruit = fruits.findIndex(fruit => fruit.id === id);
    fruits[indexOfFruit] = {id: id, ...req.body};
    res.status(201).json(fruits[indexOfFruit]);
  }

});

app.use((req, res, next) => {
  next({
    status: 404,
    message: `Could not ${req.method} ${req.path}`
  });
});

app.use((err, req, res, next) => {
  const { message, status } = err;
  res.status(status).json({ message });
});

const listener = () => console.log(`Listening on Port ${PORT}!`);
app.listen(PORT, listener);
